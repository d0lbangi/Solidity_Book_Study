[유투브 강의 - Solidity]

1강 - Hello Solidity

solidity는 스마트 컨트랙을 개발하기 위한 언어이다.
스마트 컨트랙은 미리 정의된 조건이 충족이되면 블로체인 안에 저장된 프로그램이 작동되는 것이다. 
// SPDX-License-Identifier: GPL-3.0 : 이 라이센스는 무조건 맨위에 명시 해주셔야 에러가 나지 않습니다.
pragma solidity >=0.7.0 <0.9.0; : 솔리디티의 컴파일 버전 명시 입니다 ( 즉 0.7 ~0.9 의 버전을 사용)
contract Hello{ : 스마트 컨트랙 명시 입니다. 
 string public hi = "Hello solidity";  : hi 라는 public 함수에 hello solidity 를 넣었습니다. 
 
 
 
 
 
 
 
2강 - data type

solidity에는 기본적으로 boolean, string, bytes,Integer ,address 라는 변수들이 대표적으로 있습니다. 
 
다른 언어들은 접해보신분들은, address 빼고는 친숙하실거라 생각이 듭니다.
 
1. boolean : true 와 false 가 있습니다.
 
밑에 연산자와 함께 쓰기도 하죠
! (Not)  ex) !true => false
&& (AND) ex) true && false => false
|| (OR) ex) true && false => true
== (equality) ex) true == true => true
!= (inequality) ex) true != true => false
2. string : string 형을 쓰실때는 " " 를 붙여서 쓰시면 됩니다.
그러나, 솔리디티에서는 string 쓰는 것을 지양합니다, 즉 이유는 가스를 더 소비하기 때문 입니다.
 
갑자기, 가스가 나와서 뜬끔 없으시다고 생각하실지 모르겠으나, 가스는 스마트컨트랙 개념에서, 보안적으로도 너무 중요한 개념입니다. 가스는 간단하게 말하면, 스마트컨트랙을 운영시키는 연료라고 생각하시면 됩니다. 
 
다시 돌아와서 가스를 더 소비 합니다, 즉 솔리디티 입장에서 string을 받아서 다시 byte화 시켜서 이해를 합니다. 
반대로 byte를 string화 하여 꺼냅니다. string과 byte를 왔다갔다 변경하여 가스를 소비하는것보단, 솔리디티입장에서 편하게 byte를 받는것을 더 좋아 하겠죠.
 
3. bytes : 솔리디티는 byte1 ~ byte32 까지 존재합니다. 
뒤에 숫자에따라 byte의 크기 가 정해집니다. 예를들어서 byte32 로 쓰신다면 길이가 32 개인거죠. 
byte의 크기를 아신다면 크기에 맞게 지정해주시는 편이 나아요.
 
4. Integer : Integer 는 두가지 타입으로 나뉘어요
int : 기호있는 integer
uint:  기호없는 integer 
순전히 기호 있고 없는 차이는 음수의 값을 쓰냐 안쓰냐에 따라서 인티져의 범위가 달라진답니다. 
int : 기호있는 integer 
int8 : -2^7 ~ 2^7-1
int16: -2^15~2^15-1
int32: -2^31~2^31-1
int64: -2^63~2^63-1
int128 : -2^127~2^127-1
int256 (=int): -2^255~2^255-1
uint:  기호없는 integer 
uint8 : 0~2^8-1
uint16: -0~2^16-1
uint32: -0~2^32-1
uint64: -0~2^64-1
uint128 : -0~2^128-1
uint256 (=uint): 0~2^256-1
Integer는 밑에 연산자와 함께 놀기도 합니다.
+ 더하기  2+2 => 4
- 빼기 2-2 => 0
* 곱하기 2*2 =>4
/ 나누기 몫 2/2 => 1
% 나누기 나머지 2/2= 0
** 지수 2**2(=2^2) =4
4. address : address는 20 bytes 의 길이 인데요. 
address 는 문자 그대로 주소를 나타내요,
예를들어 스마트컨트랙을 배포한다 할 때, 배포된 스마트 컨트랙은 주소를 얻어요.
이와 마찬가지로, 디지털 지갑의 계정마다 각자의 주소를 할당 받아요.
 
그러면 주소로 도대체 무엇을 할까요? 
 
저희는 이 주소를 통해서, 디지털 코인을 보내기도하고, 스마트 컨트랙을 불러오기도 한답니다.
그러면, 쉽게 생각하면, 주소란 이더 같은 디지털 코인을 주고 받는 은행 계좌번호정도 라고 일단 생각하시면 되요.
 
그런데, 저희가 이더리움을 보내기 위해서는 주소 payable 이라는 녀석을 붙여야합니다.
이 부분은 다른 강의에서 자세하게 다룰게요. 
지금은 주소 = 계좌번호 라고 생각하시면 된답니다. 





3강 - Ether/GWei/Wei 그리고 Gas

이더리움의 코인은 ETH 이더 라고 다들 알고 있을 거라 생각합니다.

 

1 ether = 10^9 Gwei = 10^18 wei 입니다.

다시 말하자면 1^18 wei 는 1 이더를 나타냅니다.

이와 비슷하게, 한국돈 100원은 1원이 100 개있다와 같은 이치입니다.

 

그러면, 0.00000000000000001 ehter = 1 wei 입니다

비슷한 예로, 코인 마켓에서 0.01 ether 를 샀다고 가정하였을때, 저희는 1^16wei를 산거라고 할 수 있습니다.

 

ether 와 wei 의 변환이 익숙해지실거라 생각합니다.

 

1ether = 10^9 Gwei 라는 도대체 Gwei는 무엇일까요?? 

Gwei는 주로 가스를 소비했을때, 사용되는 단위입니다.

저번장에서도 설명했듯이, 스마트 컨트랙을 사용하기위해서 또는, 이더리움 블록체인과 상호작용하기 위해서는 

가스가 필요해요.
 

저희는 가스비용을 Gwei 단위로 낸답니다. 

 

그렇다면 가스비용은 어떻게 책정될까요?

사용하고자 하는 스마트 컨트랙 안에 정의된 코드의길이에 따라 가스 비용이 책정됩니다.
길이가 짧을수록 소비되는 가스가 적어지죠
스마트 컨트랙 안에 무엇으로 정의 되냐에 따라 가스 소비하는 비용이 달라져요
예를들어, string 이나 modifer를 사용하는경우 가스가 더 많이 들어간답니다.
가스 줄이는 방법은 나중에 설명 해보겠습니다. 
이더리움에서 제공하는 옐로우 페이퍼를 보면, 어떤 내장기능을 사용하냐에 따라 가스 소비량을 계산할 수 있답니다.  
그렇다면 가스는 왜 만든걸까요?

이더리움에 의하면, 가스를 만든이유는 DDoS(Distributed Denial of Service) 공격에서 좀 더 자유로워 지기 위해서 

만들었다고 합니다. 예를 들어, 해커가 고의적으로 블록체인 네트워크를 다운 시킬려고, 스마트 컨트랙을 지속적으로 작동하게 반복 시켜 과부화를 준다고 가정 했을때, 해커는 작동을 반복시킬때마다 Gas 비용을 지불해야하죠. 

그렇기 때문에 해커입장에서는 이더를 지불하고 공격을 해야하는데 쉽지가 않아요. 




4강 - Function1 - 정의

1. Parameter 와 Retrun 값이 없는 function 정의
 
    function 이름 () public { // (public, private, internal, external) 변경가능.  
      // 내용
    }
 
funtion을 정의하는것은 매우 간단해요, 특별한점은 public 과 같은 접근제어자를 함수명 뒤에 써준다는 것 입니다.
접근제어자는 public, private, internal, external 이 있어요. 

2. Parameter는 있고, Retrun 값이 없는 function 정의
    function 이름 (받고싶은 타입  변수명 ) public { 
      // 내용
    }
ex) 
    function 이름 (uint 256 _value) public { 
      // 내용
    }
 
1 번과 달라진점은 uint256 _value 라는 부분인데요. 
이뜻은 uin256 타입으 파라미터를 받겠다 입니다. 
더 나아가서, type 은 여러가지를 쓸수가 있겠죠 예를들어, byte, string, address 등등이 있죠

3. Parameter는 있고, Retrun 값이 있는 function 정의
    function 이름 (받고싶은 타입  변수명 ) public returns(반환하고자 하는 type) {
      // 내용
    }
ex) 
    function 이름 (uint 256 _value) public returns(uint256) { 
      // 내용
    }
 
returns에 (uint256)이 있으니, uint256만 반환한다라는 뜻입니다. 
여기서 주의해야 할 점은, 변수명이 없고 타입만 써주시면 됩니다.